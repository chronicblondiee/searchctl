input {
  http {
    host => "${HTTP_HOST:0.0.0.0}"
    port => "${HTTP_PORT:8090}"
    additional_codecs => { "application/json" => "json" }
  }
}

filter {
  # Normalize
  mutate { convert => { "message" => "string" } }

  # 1) JSON logs
  json {
    source => "message"
    tag_on_failure => ["_json_parse_failure"]
  }

  # 2) KV logs (k=v)
  if "_json_parse_failure" in [tags] {
    kv {
      source => "message"
      field_split => "\s+"
      value_split => "="
      include_brackets => true
    }
    mutate { add_tag => ["_kv_parsed"] }
  }

  # 3) Serilog (Renderings may vary; try common patterns)
  if "_json_parse_failure" in [tags] and "_kv_parsed" not in [tags] {
    grok {
      match => {
        "message" => [
          # ISO ts [LEVEL] Message template with properties
          "%{TIMESTAMP_ISO8601:ts}\s+\[%{LOGLEVEL:level}\]\s+%{GREEDYDATA:log_message}",
          # LEVEL Message
          "%{LOGLEVEL:level}\s+%{GREEDYDATA:log_message}"
        ]
      }
      tag_on_failure => ["_not_serilog"]
    }
    date { match => ["ts", "ISO8601"] target => "@timestamp" }
  }

  # 4) Generic line logs (timestamp level message)
  if "_json_parse_failure" in [tags] and "_kv_parsed" not in [tags] and "_not_serilog" in [tags] {
    grok {
      match => {
        "message" => [
          "%{TIMESTAMP_ISO8601:ts}\s+%{LOGLEVEL:level}\s+%{GREEDYDATA:log_message}",
          "%{TIMESTAMP_ISO8601:ts}\s+\[%{LOGLEVEL:level}\]\s+%{GREEDYDATA:log_message}",
          "\[%{LOGLEVEL:level}\]\s+%{GREEDYDATA:log_message}"
        ]
      }
      tag_on_failure => ["_line_parse_failure"]
    }
    date { match => ["ts", "ISO8601"] target => "@timestamp" }
  }

  # Normalize level field
  if [level] {
    mutate { lowercase => ["level"] }
  } else if [log.level] {
    mutate { add_field => { "level" => "%{[log][level]}" } }
    mutate { lowercase => ["level"] }
  } else if [severity] {
    mutate { add_field => { "level" => "%{[severity]}" } }
    mutate { lowercase => ["level"] }
  }

  # Optional: derive level from KV if present
  if ![level] and [lvl] {
    mutate { add_field => { "level" => "%{[lvl]}" } }
    mutate { lowercase => ["level"] }
  }

  # Drop DEBUG
  if [level] == "debug" {
    drop { }
  }
}

output {
  elasticsearch {
    hosts => [ "${ES_HOSTS:https://localhost:9200}" ]
    user => "${ES_USERNAME:elastic}"
    password => "${ES_PASSWORD:changeme}"
    data_stream => true
    data_stream_type => "logs"
    data_stream_dataset => "unified.parsed"
    data_stream_namespace => "${DATA_STREAM_NAMESPACE:default}"
    ilm_enabled => false
  }
}


