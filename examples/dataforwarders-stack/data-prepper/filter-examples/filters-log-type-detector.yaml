filters_log_type_detector:
  workers: ${FILTER_WORKERS:2}
  delay: ${FILTER_DELAY_MS:100}
  source:
    http:
      port: ${FILTER_DETECT_HTTP_PORT:2130}
  processor:
  # Apache access
  - grok:
      match:
        message: [ "%{COMBINEDAPACHELOG}" ]
      tag_on_failure: [ "_not_apache" ]
  - add_tags:
      tags: [ "log_type:apache_access" ]
  - rename_keys:
      mappings:
        clientip: source.ip
  - user_agent:
      source: agent
      target: user_agent
  - geoip:
      source: source.ip
      target: geoip
  # Nginx access
  - grok:
      match:
        message: [ "%{IPORHOST:clientip} - %{DATA:ident} %{DATA:auth} \\[ %{HTTPDATE:nginx.access.time} \\] \"%{WORD:verb} %{DATA:request} HTTP/%{NUMBER:httpversion}\" %{NUMBER:response:int} %{NUMBER:bytes:int} \"%{DATA:referrer}\" \"%{DATA:agent}\"" ]
      tag_on_failure: [ "_not_nginx_access" ]
  - add_tags:
      tags: [ "log_type:nginx_access" ]
  - rename_keys:
      mappings:
        clientip: source.ip
  - user_agent:
      source: agent
      target: user_agent
  - geoip:
      source: source.ip
      target: geoip
  # Nginx ingress
  - grok:
      match:
        message: [ "%{IPORHOST:clientip} - %{DATA:remote_user} \\[ %{HTTPDATE:time_local} \\] \"%{WORD:verb} %{DATA:request} HTTP/%{NUMBER:httpversion}\" %{NUMBER:status:int} %{NUMBER:body_bytes_sent:int} \"%{DATA:referrer}\" \"%{DATA:agent}\" %{NUMBER:request_length:int} %{NUMBER:request_time:float} \\[ %{DATA:upstream_status} \\] \\[ %{DATA:upstream_addr} \\] \\[ %{NUMBER:upstream_response_time:float} \\] %{DATA:namespace}/%{DATA:ingress}/%{DATA:service}/%{DATA:pod} %{DATA:host} %{IPORHOST:server_addr}:%{NUMBER:server_port:int}" ]
      tag_on_failure: [ "_not_nginx_ingress" ]
  - add_tags:
      tags: [ "log_type:nginx_ingress" ]
  - rename_keys:
      mappings:
        clientip: source.ip
  - user_agent:
      source: agent
      target: user_agent
  - geoip:
      source: source.ip
      target: geoip
  # Syslog auth
  - grok:
      match:
        message: [ "%{SYSLOGTIMESTAMP:syslog_timestamp} %{HOSTNAME:host} sshd\\[%{NUMBER:pid}\\]: %{GREEDYDATA:sshd_message}", "%{SYSLOGTIMESTAMP:syslog_timestamp} %{HOSTNAME:host} sudo\\[%{NUMBER:pid}\\]: %{GREEDYDATA:sudo_message}" ]
      tag_on_failure: [ "_not_syslog_auth" ]
  - add_tags:
      tags: [ "log_type:syslog_auth" ]
  - grok:
      match:
        sshd_message: [ "Accepted %{WORD:ssh_method} for %{USERNAME:user.name} from %{IP:source.ip} port %{NUMBER:source.port:int}" ]
      tag_on_failure: [ "_grok_sshd_parse_failure" ]
  - date:
      from_time_received: false
      match: [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
  # K8s container (CRI)
  - dissect:
      patterns:
        message: "%{ts->} %{stream} %{flags} %{log}"
      add_tags: [ "_cri_dissect" ]
  - add_tags:
      tags: [ "log_type:k8s_container" ]
  - date:
      match: [ "ts", "ISO8601" ]
      target: "@timestamp"
  - json:
      source: log
      target: ""
      ignore_invalid_json: true
  - remove_keys:
      keys: [ "flags", "host", "@version" ]
  # Generic JSON app
  - json:
      source: message
  - add_tags:
      tags: [ "log_type:json_app" ]
  - date:
      match: [ "@timestamp", "ISO8601", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ" ]
      target: "@timestamp"
      timezone: "UTC"
  - lowercase_strings:
      keys: [ "level" ]
  - rename_keys:
      mappings:
        host: host.name
  sink:
  - opensearch:
      hosts: [ "${OPENSEARCH_HOSTS:https://localhost:9200}" ]
      username: "${OPENSEARCH_USERNAME:admin}"
      password: "${OPENSEARCH_PASSWORD:admin}"
      index: "${OS_INDEX_FILTER_DETECT:logs-log-type-detected}"
      ssl: ${OS_SSL:true}
      insecure: ${OS_INSECURE:false}
